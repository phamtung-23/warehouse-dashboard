services:
  # Berry Material React Development
  dashboard-react:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
      target: development
    ports:
      - "${REACT_PORT:-5173}:5173"
    volumes:
      # Mount source code for hot reload
      - ./dashboard/src:/app/src
      - ./dashboard/public:/app/public
      - ./dashboard/index.html:/app/index.html
      - ./dashboard/vite.config.mts:/app/vite.config.mts
      - ./dashboard/tsconfig.json:/app/tsconfig.json
      - ./dashboard/tsconfig.node.json:/app/tsconfig.node.json
      # Exclude node_modules from mounting
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-3.9.0}
      - VITE_APP_BASE_NAME=${VITE_APP_BASE_NAME:-/}
      - VITE_APP_API_URL=http://localhost:${BACKEND_PORT:-3001}
    networks:
      - berry-network
    depends_on:
      - backend-api
    restart: unless-stopped
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NestJS Backend API Development
  backend-api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
      target: development
    ports:
      - "${BACKEND_PORT:-3001}:3000"
    volumes:
      # Mount source code for hot reload
      - ./backend-api/src:/app/src
      - ./backend-api/test:/app/test
      - ./backend-api/package.json:/app/package.json
      - ./backend-api/tsconfig.json:/app/tsconfig.json
      - ./backend-api/tsconfig.build.json:/app/tsconfig.build.json
      - ./backend-api/nest-cli.json:/app/nest-cli.json
      # Exclude node_modules from mounting
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-berry_user}:${POSTGRES_PASSWORD:-berry_pass}@postgres:5432/${POSTGRES_DB:-berry_db}
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-berry_redis_pass}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
    networks:
      - berry-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for session storage (if needed)
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT_HOST:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-berry_redis_pass}
    volumes:
      - redis_data:/data
    networks:
      - berry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-berry_redis_pass}", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Optional: Database (if backend is added later)
  postgres:
    image: postgres:16-alpine
    ports:
      - "${POSTGRES_PORT_HOST:-5432}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-berry_db}
      POSTGRES_USER: ${POSTGRES_USER:-berry_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-berry_pass}
    volumes:
      - ${POSTGRES_DATA_PATH:-./postgres_data}:/var/lib/postgresql/data
    networks:
      - berry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-berry_user} -d ${POSTGRES_DB:-berry_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:

networks:
  berry-network:
    driver: bridge